from aiogram import Dispatcher, types, Bot
from aiogram.dispatcher import FSMContext

from bot.database import sql_helper
from bot.misc.other import create_buttons, reset_state
from bot.misc.states import States


async def __manage_quiz(message: types.Message, state: FSMContext) -> None:
    bot: Bot = message.bot
    chat_id = message.chat.id

    await state.set_state(States.managing_questions)
    await bot.send_message(chat_id,
                           "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é",
                           reply_markup=create_buttons(
                               ["–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –æ–ø—Ä–æ—Å ‚ûï",
                                "–£–¥–∞–ª–∏—Ç—å –æ–ø—Ä–æ—Å ‚ùå",
                                "–ù–∞–∑–∞–¥ ‚¨Ö"]))


async def __create_new_quiz(message: types.Message, state: FSMContext) -> None:
    bot: Bot = message.bot
    chat_id = message.chat.id

    await state.set_state(States.creating_questions)
    await state.set_data(data={"questions": []})
    await bot.send_message(chat_id,
                           "–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å",
                           reply_markup=create_buttons(
                               ["–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ ‚ùå"]))


async def __remove_quiz(message: types.Message, state: FSMContext) -> None:
    bot: Bot = message.bot
    chat_id = message.chat.id

    if sql_helper.drop_table(sql_helper.QUESTIONS_TABLE_NAME):
        await bot.send_message(chat_id, "–û–ø—Ä–æ—Å –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!")
    else:
        await bot.send_message(chat_id, "–ê–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤ –Ω–µ—Ç!")
    await reset_state(bot, chat_id, state)


async def __return_back(message: types.Message, state: FSMContext):
    bot: Bot = message.bot
    chat_id = message.chat.id
    await reset_state(bot, chat_id, state)


async def __create_question(message: types.Message, state: FSMContext) -> None:
    bot: Bot = message.bot
    chat_id = message.chat.id
    text = str(message.text).lower().strip()
    questions = dict(await state.get_data()).get("questions")
    if text == "–∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ ‚ùå":
        if len(questions) > 0:
            sql_helper.drop_table(sql_helper.QUESTIONS_TABLE_NAME)
            sql_helper.add_questions(questions)
        else:
            await bot.send_message(chat_id,
                                   "–ù–µ –±—ã–ª–æ –ø–æ–ª—É—á–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.\n"
                                   "–í —Ü–µ–ª—è—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ã–º –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –ø—Ä–µ–¥—ã–¥—É—â–∏–π –æ–ø—Ä–æ—Å, –µ—Å–ª–∏ –æ–Ω –±—ã–ª.")

        await reset_state(bot, chat_id, state)
        return

    questions.append((text, ""))

    await state.set_data(data={"questions": questions})
    await bot.send_message(chat_id,
                           "–í–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ",
                           reply_markup=create_buttons(
                               ["–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ ‚ùå"]))


async def __reset_state(callback_query: types.CallbackQuery, state: FSMContext) -> None:
    bot: Bot = callback_query.bot
    await reset_state(bot, callback_query.message.chat.id, state)
    await callback_query.message.delete_reply_markup()


def register_admin_handlers(dp: Dispatcher) -> None:
    # region Message handlers

    dp.register_message_handler(__manage_quiz,
                                content_types=["text"],
                                text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞–º–∏ üîè",
                                state=States.main_menu)

    dp.register_message_handler(__create_new_quiz,
                                content_types=["text"],
                                text="–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –æ–ø—Ä–æ—Å ‚ûï",
                                state=States.managing_questions)

    dp.register_message_handler(__remove_quiz,
                                content_types=["text"],
                                text="–£–¥–∞–ª–∏—Ç—å –æ–ø—Ä–æ—Å ‚ùå",
                                state=States.managing_questions)

    dp.register_message_handler(__return_back,
                                content_types=["text"],
                                text="–ù–∞–∑–∞–¥ ‚¨Ö",
                                state=States.managing_questions)

    dp.register_message_handler(__create_question,
                                content_types=["text"],
                                state=States.creating_questions)

    # endregion

    # region Callback handlers

    dp.register_callback_query_handler(__reset_state,
                                       lambda c: c.data == "cancel",
                                       state="*")

    # endregion
